= ScaleDown

A RESTful server for quickly scaling and serving images. Nothing more.

Supports cropping images and converts CMYK to RGB.

Images are scaled based upon their URL. An HMAC signature is used to prevent malicious scaling of images (ie: bring your server down.)

The schema is simple

  http://:server/:geometry/:path_to_file/:filename?:hmac_signature

  :server is the address running ScaleDown

  :geometry is widtxheight.  There can be an optional `-crop` flag attached.

  :path_to_file is the public path to the file

  :filename is the name of the image to scale

  :hmac_signature is security measure to validate the request

For example

  http://images.example.com/400x300/images/logo.png?A3SDACEDF

  would 301 redirect to the scaled image

  http://images.example.com/images/scaled/400x300/logo.png

To crop an image include the 'cropped' option

  http://images.example.com/400x300-cropped/images/logo.png?A3SDACEDF

Use 'auto' to have an image scale to one dimension or another.

For example, to ensure an image is 300 pixels wide

  http://images.example.com/300xauto/images/logo.png/?A3SDACEDF

There is a very simple `/info` function for getting the image dimesions. It just returns a string with the WIDTHxHEIGHT.

  http://images.exmaple.com/images/logo.png/info

== Installation and Configuration

  gem install scale_down

Create a rackup file (config.ru)

  require 'scale_down'

  ScaleDown.tap do |config|

    # This is the shared secret.  Use something strong
    # Perhaps a visit to http://www.random.org/strings/?num=10&len=20&digits=on&upperalpha=on&format=html&rnd=new
    config.hmac_key    = "secret"

    # You can use a different HMAC, see the ruby-hmac gen
    config.hmac_method = HMAC::SHA1

    # The length of the HMAC signature to use
    config.hmac_length = 8

    # The path to the public directory
    config.public_path = File.expand_path(File.dirname(__FILE__))+"/public"

  end

  run ScaleDown::Controller

Start the server using whatever server you want.

  thin start -p 3002


== Generating the URL

In your application you will need to generate the URL for the image source.

Filenames can have characters (# ? /) which may need to be escaped.

Filenames should be CGI escaped before the HMAC is generated, and only escape the filename, not the path or options.

  # Example ruby function to generate signed URL
  require 'HMAC::SHA1'
  require 'cgi'

  # ie signed_image_url('images', 'picture.png', '400x300-cropped')
  def signed_image_url(path, filename, options)
    hmac = HMAC::SHA1.new("secret").update("/#{options}/#{path}/#{filename}").to_s[0..8]
    "http://images.myserver.com/#{options}/#{path}/#{CGI.escape(filename)}?#{hmac}"
  end

Of course this could be done in PHP, Python, or whatever language your application is running.

== TODO

Support DELETE requests to remove scaled images.

Custom Read/Write methods to allow for more than just local storage.

== Dependencies

* Sinatra
* RMagick
* Ruby-HMAC

RMagick can be a bit tricky to install, these links[http://www.google.com/search?q=install+rmagick] might help.

== License

LICENSE:

(The MIT License)

Copyright © 2010 John Weir & Fame Driver LLC

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‘Software’), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ‘AS IS’, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
